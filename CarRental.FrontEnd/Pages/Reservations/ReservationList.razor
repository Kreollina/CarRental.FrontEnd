@page "/reservations"
@using System.Data
@using ClosedXML.Excel

@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@if (reservations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTable Items="@reservations" Hover="true" Striped="true" FixedHeader="true" FixedFooter="true">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Reservation List</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.PersonAddAlt1" @onclick="AddNewReservation">Create reservation</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>ReservationID</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>DateFrom</MudTh>
            <MudTh>DateTo</MudTh>
            <MudTh>CustomerID</MudTh>
            <MudTh>VehicleID</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.ReservationID</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="DateFrom">@context.DateFrom</MudTd>
            <MudTd DataLabel="DateTo">@context.DateTo</MudTd>
            <MudTd DataLabel="CustomerID">@context.CustomerID</MudTd>
            <MudTd DataLabel="CustomerID">@context.VehicleID</MudTd>
            <MudTd Style="text-align:right">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Warning" OnClick="() => UpdateReservation(context.ReservationID)" />
            </MudTd>
            <MudTd Style="text-align:right">
                <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Error" OnClick="() => DeleteReservation(context.ReservationID)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudButton Color="Color.Default" OnClick="GenerateExcel">Export to Excel</MudButton>
}

@code {
    private MudTheme Theme = new MudTheme();
    private List<ReservationModel> reservations;

    protected override async Task OnInitializedAsync()
    {
        reservations = await ReservationService.GetReservationsAsync();
    }

    private async Task AddNewReservation(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/newreservation", true);
    }

    private async Task UpdateReservation(int id)
    {
        NavigationManager.NavigateTo($"/updatereservation/{id}", true);
    }

    private async Task DeleteReservation(int reservationId)
    {
        await ReservationService.DeleteReservationAsync(reservationId);
        reservations = await ReservationService.GetReservationsAsync();
    }

    private async Task GenerateExcel()
    {
        var data = await ReservationService.GetReservationsAsync();
        var wb = new XLWorkbook();
        var ws = wb.Worksheets.Add("Reservations");
        var headers = new [] { "ReservationID", "Description", "DateFrom", "DateTo", "CustomerID", "VehicleID" };
        for (var i = 0; i < headers.Length; i++)
        {
            var headerCell = ws.Cell(1, i + 1);
            headerCell.Value = headers[i];
            headerCell.Style.Fill.BackgroundColor = XLColor.Glaucous;
            headerCell.Style.Font.Bold = true;
            headerCell.Style.Font.FontColor = XLColor.White;
        }
        
        int rowIndex = 2;
        foreach (var element in data)
        {
            ws.Cell(rowIndex, 1).Value = element.ReservationID;
            ws.Cell(rowIndex, 2).Value = element.Description;
            ws.Cell(rowIndex, 3).Value = element.DateFrom;
            ws.Cell(rowIndex, 4).Value = element.DateTo;
            ws.Cell(rowIndex, 5).Value = element.CustomerID;
            ws.Cell(rowIndex, 6).Value = element.VehicleID;
            rowIndex++;
        }
        ws.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        ws.ColumnsUsed().AdjustToContents();

        using var ms = new MemoryStream();
        wb.SaveAs(ms);
        ms.Position = 0;

        using var streamReference = new DotNetStreamReference(ms);
        var fileName = $"ReservationsFile_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamReference);
    }
}